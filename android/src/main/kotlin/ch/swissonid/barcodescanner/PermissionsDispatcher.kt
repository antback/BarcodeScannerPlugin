package ch.swissonid.barcodescanner

/*
 * Copyright (C) 2017 Patrice MÃ¼ller.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
// This file was generated by PermissionsDispatcher. Do not modify!

import android.content.Context
import android.content.Intent
import android.net.Uri
import android.provider.Settings
import android.support.v4.app.ActivityCompat
import permissions.dispatcher.PermissionUtils

internal val REQUEST_STARTCAMERA: Int = 0

private val PERMISSION_STARTCAMERA: Array<String> = arrayOf("android.permission.CAMERA")

fun BarcodescannerPlugin.startCameraWithCheck() {
    if (PermissionUtils.hasSelfPermissions(this.mActivity, *PERMISSION_STARTCAMERA)) {
        BarcodeScannerActivity.startForResult(this.mActivity,BARCODE_REQUEST_CODE)
    } else {
        if (PermissionUtils.shouldShowRequestPermissionRationale(this.mActivity, *PERMISSION_STARTCAMERA)) {
            showRationaleForCamera()
        } else {
            ActivityCompat.requestPermissions(this.mActivity, PERMISSION_STARTCAMERA, REQUEST_STARTCAMERA)
        }
    }
}

fun BarcodescannerPlugin.onRequestPermissionsResult(requestCode: Int, grantResults: IntArray) {
    when (requestCode) {
        REQUEST_STARTCAMERA ->
            if (PermissionUtils.verifyPermissions(*grantResults)) {
                BarcodeScannerActivity.startForResult(mActivity, BARCODE_REQUEST_CODE)
            } else {
                if (!PermissionUtils.shouldShowRequestPermissionRationale(this.mActivity, *PERMISSION_STARTCAMERA)) {
                    onCameraNeverAskAgain()
                } else {
                    onCameraDenied()
                }
            }
    }
}

fun BarcodescannerPlugin.requestPersmission(){
    ActivityCompat.requestPermissions(mActivity, PERMISSION_STARTCAMERA, REQUEST_STARTCAMERA)
}

fun BarcodescannerPlugin.openPersmissionSettings() {
    mActivity.openPermissionSettings()
}

fun Context.openPermissionSettings() {
    val intent = Intent(Settings.ACTION_APPLICATION_DETAILS_SETTINGS)
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK)
    val uri = Uri.fromParts("package", packageName, null)
    intent.data = uri
    this.startActivity(intent)

}
/*internal class StartCameraPermissionRequest(target: BarcodeScannerActivity) : PermissionRequest {
    private val weakTarget: WeakReference<BarcodeScannerActivity> = WeakReference(target)

    override fun proceed() {
        val target = weakTarget.get() ?: return

    }

    override fun cancel() {
        val target = weakTarget.get() ?: return
        target.onCameraDenied()
    }
}*/
